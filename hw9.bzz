#
# In the ARGoS window, you can move the camera with the following commands:
#
# - Translation: W A S D Q E keys, right-click + drag
# - Rotation: left-click + drag
#
# Selection: shift-click on the robot
# Remove selection: shift-click elsewhere
#
# Bug: selection is finnicky in the top-down view (Camera 1).
# Solution: switch to another camera and it'll work.
#

#
# Compiling and running the code
#
# - In the ARGoS window: Pause the simulation (if it's not paused already)
# - In the editor: do what you need, save, press the "Execute" button
# - In the ARGoS window: Press the "Play", "Step", or "Fast Forward" buttons
#

#
# This editor sucks.
#
# I know.
#
# But when it's open, it detects whether the open files have been modified elsewhere.
# So open this editor and then open the file you wanna edit in your favorite editor.
# When you save in your editor, the changes will be reflected here. Press Execute to compile and run.
# If you want syntax highlighting, JavaScript is pretty similar to Buzz.
#

function init() {
  # Pick a random initial value for the counter
  math.rng.setseed(id)
  count = math.rng.uniform(0,99)
  same_t_done = 0
  # Listen to messages about flashing
	# See: https://the.swarming.buzz/wiki/doku.php?id=buzz_syntax_cheatsheet
  neighbors.listen("flash",
    function(topic, value, robot){

if(value == 1 and count != 0 and same_t_done == 1)
{
count = count+0.5*count
same_t_done = 0
}
    })
	# Draw the trajectory of the robot in green
	# See: https://the.swarming.buzz/wiki/doku.php?id=buzz_argos
	debug.trajectory.enable(100, 0, 255, 0)
}

function step() {
  # Increase counter
  count = count + 1
	same_t_done = 1
  # Debug message written on top of robot
	# See: https://the.swarming.buzz/wiki/doku.php?id=buzz_argos
  #debug.print("c=", count)
  # Set the LED color to RED
	# See: https://the.swarming.buzz/wiki/doku.php?id=buzz_kh4
	#  set_leds(255, 0, 0)
  # Sum the proximity sensors, considering each as a vector
	# The result is a vector that points to the "densest" obstacle direction
  obst = reduce(proximity,
		function(idx,sensor,sofar) {
			return {
				.x = sofar.x + sensor.value * math.cos(sensor.angle),
				.y = sofar.y + sensor.value * math.sin(sensor.angle)
			}}, { .x = 0.0, .y = 0.0 })
	if(neighbors.count() > 0) {
		obst.x = obst.x / neighbors.count()
		obst.y = obst.y / neighbors.count()
	}
	# Draw the vector
	# See: https://the.swarming.buzz/wiki/doku.php?id=buzz_argos
	debug.rays.add(
		255, 0, 0,
		0.0, 0.0, 0.1,
		obst.x, obst.y, 0.1)
  # Move straight
	# See: https://the.swarming.buzz/wiki/doku.php?id=buzz_kh4
  #  set_wheels(left, right) # direct wheel speed control (cm/s)
  #  gotop(linear, angular)  # velocity vector in polar coordinates (cm/s, rad/s)
#  gotoc(10.0, 0.0)           # velocity vector in cartesian coordinates (cm/s)
  # Send a message
  if(count > 100) {
    neighbors.broadcast("flash", 1)
    count = 0
		set_leds(255, 0, 0)
  }
  else {
    neighbors.broadcast("flash", 0)
		set_leds(0, 0, 0)
  }
}

function reset() {
}

function destroy() {
}
